{"ast":null,"code":"import React,{useContext,createContext}from\"react\";import{Api}from\"../utils/api/api\";import useToken from\"./use-token\";import{jsx as _jsx}from\"react/jsx-runtime\";export var AuthContext=/*#__PURE__*/createContext({});export function ProvideAuth(props){var auth=useProvideAuth();return/*#__PURE__*/_jsx(AuthContext.Provider,{value:auth,children:props.children});}export var useAuth=function useAuth(){return useContext(AuthContext);};// Provider hook that creates auth object and handles state\nfunction useProvideAuth(){var _useToken=useToken(),token=_useToken.token,setToken=_useToken.setToken,remove=_useToken.remove;// Wrap any Firebase methods we want to use making sure ...\n// ... to save the user to state.\nvar signin=function signin(callback,username,password){var response=Api.getSession(username,password).then(function(res){if(res.code===200){setToken(username===null||username===void 0?void 0:username.trim(),res.data);callback();return\"success\";}else if(res.code===400){return res.data.ExceptionMessage;}else{return res.data;}});return response;};var signout=function signout(callback){remove();callback();};var changePassword=function changePassword(password){return void{};};return{token:token,signin:signin,signout:signout,changePassword:changePassword};}","map":{"version":3,"sources":["E:/QTIME-WEB-FE/src/contexts/use-auth.tsx"],"names":["React","useContext","createContext","Api","useToken","AuthContext","ProvideAuth","props","auth","useProvideAuth","children","useAuth","token","setToken","remove","signin","callback","username","password","response","getSession","then","res","code","trim","data","ExceptionMessage","signout","changePassword"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAqCC,UAArC,CAAiDC,aAAjD,KAAsE,OAAtE,CACA,OAASC,GAAT,KAAoB,kBAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,C,2CAUA,MAAO,IAAMC,CAAAA,WAAW,cAAGH,aAAa,CAAC,EAAD,CAAjC,CAEP,MAAO,SAASI,CAAAA,WAAT,CAAqBC,KAArB,CAAiC,CACtC,GAAMC,CAAAA,IAAI,CAAGC,cAAc,EAA3B,CACA,mBACE,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAED,IAA7B,UAAoCD,KAAK,CAACG,QAA1C,EADF,CAGD,CAED,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B,MAAOV,CAAAA,UAAU,CAACI,WAAD,CAAjB,CACD,CAFM,CAGP;AACA,QAASI,CAAAA,cAAT,EAA0B,eACYL,QAAQ,EADpB,CAChBQ,KADgB,WAChBA,KADgB,CACTC,QADS,WACTA,QADS,CACCC,MADD,WACCA,MADD,CAExB;AACA;AACA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CACbC,QADa,CAEbC,QAFa,CAGbC,QAHa,CAIO,CACpB,GAAMC,CAAAA,QAAQ,CAAGhB,GAAG,CAACiB,UAAJ,CAAeH,QAAf,CAAyBC,QAAzB,EAAmCG,IAAnC,CAAwC,SAAAC,GAAG,CAAI,CAC9D,GAAGA,GAAG,CAACC,IAAJ,GAAc,GAAjB,CACA,CACEV,QAAQ,CAACI,QAAD,SAACA,QAAD,iBAACA,QAAQ,CAAEO,IAAV,EAAD,CAAmBF,GAAG,CAACG,IAAvB,CAAR,CACAT,QAAQ,GACR,MAAO,SAAP,CACD,CALD,IAMK,IAAGM,GAAG,CAACC,IAAJ,GAAc,GAAjB,CACL,CACE,MAAOD,CAAAA,GAAG,CAACG,IAAJ,CAASC,gBAAhB,CACD,CAHI,IAKL,CACE,MAAOJ,CAAAA,GAAG,CAACG,IAAX,CACD,CACF,CAfgB,CAAjB,CAiBA,MAAON,CAAAA,QAAP,CACD,CAvBD,CAyBA,GAAMQ,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACX,QAAD,CAAgC,CAC9CF,MAAM,GACNE,QAAQ,GACT,CAHD,CAIA,GAAMY,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACV,QAAD,QAA4B,KAAK,EAAjC,EAAvB,CAEA,MAAO,CACLN,KAAK,CAALA,KADK,CAELG,MAAM,CAANA,MAFK,CAGLY,OAAO,CAAPA,OAHK,CAILC,cAAc,CAAdA,cAJK,CAAP,CAMD","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport { Api } from \"../utils/api/api\";\r\nimport useToken from \"./use-token\";\r\nimport * as constantClass from \"../components/Constants/Constants\";\r\n\r\ninterface IContextProps {\r\n  token: string;\r\n  signin: (callback: () => void, username: string, password: string) => Promise<string>;\r\n  signout: (callback: () => void) => void;\r\n  changePassword: (password: string) => void;\r\n}\r\n\r\nexport const AuthContext = createContext({} as IContextProps);\r\n\r\nexport function ProvideAuth(props: any) {\r\n  const auth = useProvideAuth();\r\n  return (\r\n    <AuthContext.Provider value={auth}>{props.children}</AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n// Provider hook that creates auth object and handles state\r\nfunction useProvideAuth() {\r\n  const { token, setToken, remove } = useToken();\r\n  // Wrap any Firebase methods we want to use making sure ...\r\n  // ... to save the user to state.\r\n  const signin = (\r\n    callback: () => void,\r\n    username: string,\r\n    password: string\r\n  ): Promise<string> => {\r\n    const response = Api.getSession(username, password).then(res => {\r\n      if(res.code ===  200)\r\n      {\r\n        setToken(username?.trim(), res.data);\r\n        callback();\r\n        return \"success\";\r\n      }\r\n      else if(res.code ===  400)\r\n      {\r\n        return res.data.ExceptionMessage;\r\n      }\r\n      else\r\n      {\r\n        return res.data;\r\n      }\r\n    });\r\n\r\n    return response;\r\n  };\r\n\r\n  const signout = (callback: () => void): void => {\r\n    remove();\r\n    callback();\r\n  };\r\n  const changePassword = (password: string): void => void {};\r\n\r\n  return {\r\n    token,\r\n    signin,\r\n    signout,\r\n    changePassword\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}